import pygame
import math
import random
import sys

# تهيئة Pygame
pygame.init()

# إعدادات الشاشة
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("لعبة الدبابات - العب مع أصدقائك!")

# الألوان
BACKGROUND = (30, 30, 40)
GRID_COLOR = (50, 50, 60)
RED = (220, 60, 60)
BLUE = (60, 120, 220)
GREEN = (70, 180, 70)
YELLOW = (220, 180, 60)
WHITE = (240, 240, 240)
BLACK = (20, 20, 30)

# إعدادات الدبابة
TANK_WIDTH = 40
TANK_HEIGHT = 30
TURRET_LENGTH = 20
TANK_SPEED = 3
ROTATION_SPEED = 3
BULLET_SPEED = 7
MAX_BULLETS = 3

# إعدادات الخريطة
OBSTACLES = [
    pygame.Rect(150, 150, 100, 50),
    pygame.Rect(550, 150, 100, 50),
    pygame.Rect(150, 400, 100, 50),
    pygame.Rect(550, 400, 100, 50),
    pygame.Rect(350, 250, 100, 100),
]

# فئة الدبابة
class Tank:
    def __init__(self, x, y, color, controls, player_name):
        self.x = x
        self.y = y
        self.color = color
        self.angle = 0
        self.controls = controls  # [up, down, left, right, fire]
        self.bullets = []
        self.cooldown = 0
        self.health = 100
        self.score = 0
        self.player_name = player_name
        self.hit_effect = 0

    def draw(self, screen):
        # رسم هيكل الدبابة
        tank_rect = pygame.Rect(0, 0, TANK_WIDTH, TANK_HEIGHT)
        tank_surface = pygame.Surface((TANK_WIDTH, TANK_HEIGHT), pygame.SRCALPHA)
        pygame.draw.rect(tank_surface, self.color, tank_rect, border_radius=8)
        pygame.draw.rect(tank_surface, (self.color[0]//2, self.color[1]//2, self.color[2]//2), 
                         tank_rect, width=3, border_radius=8)
        
        # رسم البرج
        turret_end_x = TANK_WIDTH // 2 + TURRET_LENGTH * math.cos(math.radians(self.angle))
        turret_end_y = TANK_HEIGHT // 2 + TURRET_LENGTH * math.sin(math.radians(self.angle))
        pygame.draw.line(tank_surface, (100, 100, 100), 
                        (TANK_WIDTH // 2, TANK_HEIGHT // 2), 
                        (turret_end_x, turret_end_y), 5)
        
        # تدوير الدبابة
        rotated_tank = pygame.transform.rotate(tank_surface, -self.angle)
        tank_rect = rotated_tank.get_rect(center=(self.x, self.y))
        screen.blit(rotated_tank, tank_rect.topleft)
        
        # تأثير الضرب
        if self.hit_effect > 0:
            pygame.draw.circle(screen, RED, (self.x, self.y), TANK_WIDTH//2 + 5, 3)
            self.hit_effect -= 1
        
        # عرض اسم اللاعب
        font = pygame.font.SysFont(None, 24)
        name_text = font.render(self.player_name, True, WHITE)
        screen.blit(name_text, (self.x - name_text.get_width()//2, self.y - 40))
        
        # عرض الصحة
        health_width = 40
        pygame.draw.rect(screen, (60, 60, 70), (self.x - health_width//2, self.y - 30, health_width, 5))
        pygame.draw.rect(screen, GREEN, (self.x - health_width//2, self.y - 30, health_width * self.health // 100, 5))

    def move(self, keys):
        # حركة الدبابة
        dx, dy = 0, 0
        if keys[self.controls[0]]:  # أعلى
            dx = TANK_SPEED * math.cos(math.radians(self.angle))
            dy = TANK_SPEED * math.sin(math.radians(self.angle))
        if keys[self.controls[1]]:  # أسفل
            dx = -TANK_SPEED * math.cos(math.radians(self.angle)) / 2
            dy = -TANK_SPEED * math.sin(math.radians(self.angle)) / 2
        if keys[self.controls[2]]:  # يسار
            self.angle -= ROTATION_SPEED
        if keys[self.controls[3]]:  # يمين
            self.angle += ROTATION_SPEED
            
        # تحديث الموقع مع التحقق من التصادمات
        new_x = self.x + dx
        new_y = self.y + dy
        
        # التحقق من حدود الشاشة
        if TANK_WIDTH//2 < new_x < WIDTH - TANK_WIDTH//2:
            self.x = new_x
        if TANK_HEIGHT//2 < new_y < HEIGHT - TANK_HEIGHT//2:
            self.y = new_y
            
        # التحقق من التصادم مع العوائق
        tank_rect = pygame.Rect(self.x - TANK_WIDTH//2, self.y - TANK_HEIGHT//2, TANK_WIDTH, TANK_HEIGHT)
        for obstacle in OBSTACLES:
            if tank_rect.colliderect(obstacle):
                self.x -= dx
                self.y -= dy
                break
        
        # تبريد الطلقات
        if self.cooldown > 0:
            self.cooldown -= 1

    def fire(self):
        if self.cooldown == 0 and len(self.bullets) < MAX_BULLETS:
            bullet_x = self.x + (TANK_WIDTH//2 + TURRET_LENGTH) * math.cos(math.radians(self.angle))
            bullet_y = self.y + (TANK_HEIGHT//2 + TURRET_LENGTH) * math.sin(math.radians(self.angle))
            self.bullets.append([bullet_x, bullet_y, self.angle])
            self.cooldown = 20  # تأخير بين الطلقات

    def update_bullets(self, tanks):
        new_bullets = []
        for bullet in self.bullets:
            bullet[0] += BULLET_SPEED * math.cos(math.radians(bullet[2]))
            bullet[1] += BULLET_SPEED * math.sin(math.radians(bullet[2]))
            
            # التحقق من حدود الشاشة
            if 0 <= bullet[0] <= WIDTH and 0 <= bullet[1] <= HEIGHT:
                # التحقق من التصادم مع العوائق
                hit_obstacle = False
                for obstacle in OBSTACLES:
                    if obstacle.collidepoint(bullet[0], bullet[1]):
                        hit_obstacle = True
                        break
                
                if not hit_obstacle:
                    new_bullets.append(bullet)
                    
                    # التحقق من إصابة الدبابات
                    for tank in tanks:
                        if tank != self:
                            tank_rect = pygame.Rect(
                                tank.x - TANK_WIDTH//2,
                                tank.y - TANK_HEIGHT//2,
                                TANK_WIDTH,
                                TANK_HEIGHT
                            )
                            if tank_rect.collidepoint(bullet[0], bullet[1]):
                                tank.health -= 10
                                tank.hit_effect = 10
                                if tank.health <= 0:
                                    tank.health = 100
                                    tank.x = random.randint(TANK_WIDTH, WIDTH - TANK_WIDTH)
                                    tank.y = random.randint(TANK_HEIGHT, HEIGHT - TANK_HEIGHT)
                                    self.score += 1
                                break
        self.bullets = new_bullets

    def draw_bullets(self, screen):
        for bullet in self.bullets:
            pygame.draw.circle(screen, YELLOW, (int(bullet[0]), int(bullet[1])), 5)
            pygame.draw.circle(screen, (220, 220, 100), (int(bullet[0]), int(bullet[1])), 3)

# إنشاء الدبابات
player1 = Tank(100, 300, RED, [pygame.K_w, pygame.K_s, pygame.K_a, pygame.K_d, pygame.K_SPACE], "اللاعب 1")
player2 = Tank(700, 300, BLUE, [pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT, pygame.K_RETURN], "اللاعب 2")
tanks = [player1, player2]

# إنشاء النجوم في الخلفية
stars = []
for _ in range(100):
    x = random.randint(0, WIDTH)
    y = random.randint(0, HEIGHT)
    size = random.randint(1, 3)
    speed = random.uniform(0.1, 0.5)
    stars.append([x, y, size, speed])

# إعدادات اللعبة
clock = pygame.time.Clock()
font_large = pygame.font.SysFont(None, 64)
font_medium = pygame.font.SysFont(None, 36)
font_small = pygame.font.SysFont(None, 24)

# حلقة اللعبة الرئيسية
running = True
game_over = False
winner = None

while running:
    # معالجة الأحداث
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_r and game_over:
                # إعادة تشغيل اللعبة
                player1.health = 100
                player2.health = 100
                player1.score = 0
                player2.score = 0
                player1.x, player1.y = 100, 300
                player2.x, player2.y = 700, 300
                game_over = False
                winner = None
            elif event.key == player1.controls[4]:  # إطلاق اللاعب 1
                player1.fire()
            elif event.key == player2.controls[4]:  # إطلاق اللاعب 2
                player2.fire()
    
    # تحديث النجوم
    for star in stars:
        star[1] += star[3]
        if star[1] > HEIGHT:
            star[1] = 0
            star[0] = random.randint(0, WIDTH)
    
    if not game_over:
        # الحصول على حالة المفاتيح
        keys = pygame.key.get_pressed()
        
        # تحريك الدبابات
        for tank in tanks:
            tank.move(keys)
            tank.update_bullets(tanks)
    
    # التحقق من فوز أحد اللاعبين
    if not game_over and (player1.score >= 5 or player2.score >= 5):
        game_over = True
        winner = player1 if player1.score >= 5 else player2
    
    # الرسم
    screen.fill(BACKGROUND)
    
    # رسم النجوم
    for star in stars:
        pygame.draw.circle(screen, WHITE, (int(star[0]), int(star[1])), star[2])
    
    # رسم الشبكة
    for x in range(0, WIDTH, 40):
        pygame.draw.line(screen, GRID_COLOR, (x, 0), (x, HEIGHT), 1)
    for y in range(0, HEIGHT, 40):
        pygame.draw.line(screen, GRID_COLOR, (0, y), (WIDTH, y), 1)
    
    # رسم العوائق
    for obstacle in OBSTACLES:
        pygame.draw.rect(screen, (80, 70, 60), obstacle)
        pygame.draw.rect(screen, (110, 90, 70), obstacle, 3)
    
    # رسم الدبابات وطلقاتها
    for tank in tanks:
        tank.draw(screen)
        tank.draw_bullets(screen)
    
    # رسم لوحة النتائج
    pygame.draw.rect(screen, (40, 40, 50, 180), (10, 10, 200, 80), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (10, 10, 200, 80), width=2, border_radius=10)
    
    score_text1 = font_small.render(f"{player1.player_name}: {player1.score}", True, RED)
    score_text2 = font_small.render(f"{player2.player_name}: {player2.score}", True, BLUE)
    screen.blit(score_text1, (30, 25))
    screen.blit(score_text2, (30, 55))
    
    # رسم تعليمات التحكم
    pygame.draw.rect(screen, (40, 40, 50, 180), (WIDTH - 210, 10, 200, 110), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (WIDTH - 210, 10, 200, 110), width=2, border_radius=10)
    
    controls_text1 = font_small.render("اللاعب 1: WASD + مسافة", True, WHITE)
    controls_text2 = font_small.render("اللاعب 2: الأسهم + Enter", True, WHITE)
    restart_text = font_small.render("R: إعادة اللعبة", True, GREEN)
    exit_text = font_small.render("ESC: خروج", True, RED)
    
    screen.blit(controls_text1, (WIDTH - 190, 25))
    screen.blit(controls_text2, (WIDTH - 190, 50))
    screen.blit(restart_text, (WIDTH - 190, 80))
    screen.blit(exit_text, (WIDTH - 190, 105))
    
    # عرض شاشة النهاية
    if game_over and winner:
        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 180))
        screen.blit(overlay, (0, 0))
        
        winner_text = font_large.render(f"{winner.player_name} يفوز!", True, winner.color)
        restart_text = font_medium.render("اضغط R لإعادة اللعبة", True, GREEN)
        
        screen.blit(winner_text, (WIDTH//2 - winner_text.get_width()//2, HEIGHT//2 - 50))
        screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT//2 + 30))
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()import pygame
import math
import random
import sys

# تهيئة Pygame
pygame.init()

# إعدادات الشاشة
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("لعبة الدبابات - العب مع أصدقائك!")

# الألوان
BACKGROUND = (30, 30, 40)
GRID_COLOR = (50, 50, 60)
RED = (220, 60, 60)
BLUE = (60, 120, 220)
GREEN = (70, 180, 70)
YELLOW = (220, 180, 60)
WHITE = (240, 240, 240)
BLACK = (20, 20, 30)

# إعدادات الدبابة
TANK_WIDTH = 40
TANK_HEIGHT = 30
TURRET_LENGTH = 20
TANK_SPEED = 3
ROTATION_SPEED = 3
BULLET_SPEED = 7
MAX_BULLETS = 3

# إعدادات الخريطة
OBSTACLES = [
    pygame.Rect(150, 150, 100, 50),
    pygame.Rect(550, 150, 100, 50),
    pygame.Rect(150, 400, 100, 50),
    pygame.Rect(550, 400, 100, 50),
    pygame.Rect(350, 250, 100, 100),
]

# فئة الدبابة
class Tank:
    def __init__(self, x, y, color, controls, player_name):
        self.x = x
        self.y = y
        self.color = color
        self.angle = 0
        self.controls = controls  # [up, down, left, right, fire]
        self.bullets = []
        self.cooldown = 0
        self.health = 100
        self.score = 0
        self.player_name = player_name
        self.hit_effect = 0

    def draw(self, screen):
        # رسم هيكل الدبابة
        tank_rect = pygame.Rect(0, 0, TANK_WIDTH, TANK_HEIGHT)
        tank_surface = pygame.Surface((TANK_WIDTH, TANK_HEIGHT), pygame.SRCALPHA)
        pygame.draw.rect(tank_surface, self.color, tank_rect, border_radius=8)
        pygame.draw.rect(tank_surface, (self.color[0]//2, self.color[1]//2, self.color[2]//2), 
                         tank_rect, width=3, border_radius=8)
        
        # رسم البرج
        turret_end_x = TANK_WIDTH // 2 + TURRET_LENGTH * math.cos(math.radians(self.angle))
        turret_end_y = TANK_HEIGHT // 2 + TURRET_LENGTH * math.sin(math.radians(self.angle))
        pygame.draw.line(tank_surface, (100, 100, 100), 
                        (TANK_WIDTH // 2, TANK_HEIGHT // 2), 
                        (turret_end_x, turret_end_y), 5)
        
        # تدوير الدبابة
        rotated_tank = pygame.transform.rotate(tank_surface, -self.angle)
        tank_rect = rotated_tank.get_rect(center=(self.x, self.y))
        screen.blit(rotated_tank, tank_rect.topleft)
        
        # تأثير الضرب
        if self.hit_effect > 0:
            pygame.draw.circle(screen, RED, (self.x, self.y), TANK_WIDTH//2 + 5, 3)
            self.hit_effect -= 1
        
        # عرض اسم اللاعب
        font = pygame.font.SysFont(None, 24)
        name_text = font.render(self.player_name, True, WHITE)
        screen.blit(name_text, (self.x - name_text.get_width()//2, self.y - 40))
        
        # عرض الصحة
        health_width = 40
        pygame.draw.rect(screen, (60, 60, 70), (self.x - health_width//2, self.y - 30, health_width, 5))
        pygame.draw.rect(screen, GREEN, (self.x - health_width//2, self.y - 30, health_width * self.health // 100, 5))

    def move(self, keys):
        # حركة الدبابة
        dx, dy = 0, 0
        if keys[self.controls[0]]:  # أعلى
            dx = TANK_SPEED * math.cos(math.radians(self.angle))
            dy = TANK_SPEED * math.sin(math.radians(self.angle))
        if keys[self.controls[1]]:  # أسفل
            dx = -TANK_SPEED * math.cos(math.radians(self.angle)) / 2
            dy = -TANK_SPEED * math.sin(math.radians(self.angle)) / 2
        if keys[self.controls[2]]:  # يسار
            self.angle -= ROTATION_SPEED
        if keys[self.controls[3]]:  # يمين
            self.angle += ROTATION_SPEED
            
        # تحديث الموقع مع التحقق من التصادمات
        new_x = self.x + dx
        new_y = self.y + dy
        
        # التحقق من حدود الشاشة
        if TANK_WIDTH//2 < new_x < WIDTH - TANK_WIDTH//2:
            self.x = new_x
        if TANK_HEIGHT//2 < new_y < HEIGHT - TANK_HEIGHT//2:
            self.y = new_y
            
        # التحقق من التصادم مع العوائق
        tank_rect = pygame.Rect(self.x - TANK_WIDTH//2, self.y - TANK_HEIGHT//2, TANK_WIDTH, TANK_HEIGHT)
        for obstacle in OBSTACLES:
            if tank_rect.colliderect(obstacle):
                self.x -= dx
                self.y -= dy
                break
        
        # تبريد الطلقات
        if self.cooldown > 0:
            self.cooldown -= 1

    def fire(self):
        if self.cooldown == 0 and len(self.bullets) < MAX_BULLETS:
            bullet_x = self.x + (TANK_WIDTH//2 + TURRET_LENGTH) * math.cos(math.radians(self.angle))
            bullet_y = self.y + (TANK_HEIGHT//2 + TURRET_LENGTH) * math.sin(math.radians(self.angle))
            self.bullets.append([bullet_x, bullet_y, self.angle])
            self.cooldown = 20  # تأخير بين الطلقات

    def update_bullets(self, tanks):
        new_bullets = []
        for bullet in self.bullets:
            bullet[0] += BULLET_SPEED * math.cos(math.radians(bullet[2]))
            bullet[1] += BULLET_SPEED * math.sin(math.radians(bullet[2]))
            
            # التحقق من حدود الشاشة
            if 0 <= bullet[0] <= WIDTH and 0 <= bullet[1] <= HEIGHT:
                # التحقق من التصادم مع العوائق
                hit_obstacle = False
                for obstacle in OBSTACLES:
                    if obstacle.collidepoint(bullet[0], bullet[1]):
                        hit_obstacle = True
                        break
                
                if not hit_obstacle:
                    new_bullets.append(bullet)
                    
                    # التحقق من إصابة الدبابات
                    for tank in tanks:
                        if tank != self:
                            tank_rect = pygame.Rect(
                                tank.x - TANK_WIDTH//2,
                                tank.y - TANK_HEIGHT//2,
                                TANK_WIDTH,
                                TANK_HEIGHT
                            )
                            if tank_rect.collidepoint(bullet[0], bullet[1]):
                                tank.health -= 10
                                tank.hit_effect = 10
                                if tank.health <= 0:
                                    tank.health = 100
                                    tank.x = random.randint(TANK_WIDTH, WIDTH - TANK_WIDTH)
                                    tank.y = random.randint(TANK_HEIGHT, HEIGHT - TANK_HEIGHT)
                                    self.score += 1
                                break
        self.bullets = new_bullets

    def draw_bullets(self, screen):
        for bullet in self.bullets:
            pygame.draw.circle(screen, YELLOW, (int(bullet[0]), int(bullet[1])), 5)
            pygame.draw.circle(screen, (220, 220, 100), (int(bullet[0]), int(bullet[1])), 3)

# إنشاء الدبابات
player1 = Tank(100, 300, RED, [pygame.K_w, pygame.K_s, pygame.K_a, pygame.K_d, pygame.K_SPACE], "اللاعب 1")
player2 = Tank(700, 300, BLUE, [pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT, pygame.K_RETURN], "اللاعب 2")
tanks = [player1, player2]

# إنشاء النجوم في الخلفية
stars = []
for _ in range(100):
    x = random.randint(0, WIDTH)
    y = random.randint(0, HEIGHT)
    size = random.randint(1, 3)
    speed = random.uniform(0.1, 0.5)
    stars.append([x, y, size, speed])

# إعدادات اللعبة
clock = pygame.time.Clock()
font_large = pygame.font.SysFont(None, 64)
font_medium = pygame.font.SysFont(None, 36)
font_small = pygame.font.SysFont(None, 24)

# حلقة اللعبة الرئيسية
running = True
game_over = False
winner = None

while running:
    # معالجة الأحداث
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_r and game_over:
                # إعادة تشغيل اللعبة
                player1.health = 100
                player2.health = 100
                player1.score = 0
                player2.score = 0
                player1.x, player1.y = 100, 300
                player2.x, player2.y = 700, 300
                game_over = False
                winner = None
            elif event.key == player1.controls[4]:  # إطلاق اللاعب 1
                player1.fire()
            elif event.key == player2.controls[4]:  # إطلاق اللاعب 2
                player2.fire()
    
    # تحديث النجوم
    for star in stars:
        star[1] += star[3]
        if star[1] > HEIGHT:
            star[1] = 0
            star[0] = random.randint(0, WIDTH)
    
    if not game_over:
        # الحصول على حالة المفاتيح
        keys = pygame.key.get_pressed()
        
        # تحريك الدبابات
        for tank in tanks:
            tank.move(keys)
            tank.update_bullets(tanks)
    
    # التحقق من فوز أحد اللاعبين
    if not game_over and (player1.score >= 5 or player2.score >= 5):
        game_over = True
        winner = player1 if player1.score >= 5 else player2
    
    # الرسم
    screen.fill(BACKGROUND)
    
    # رسم النجوم
    for star in stars:
        pygame.draw.circle(screen, WHITE, (int(star[0]), int(star[1])), star[2])
    
    # رسم الشبكة
    for x in range(0, WIDTH, 40):
        pygame.draw.line(screen, GRID_COLOR, (x, 0), (x, HEIGHT), 1)
    for y in range(0, HEIGHT, 40):
        pygame.draw.line(screen, GRID_COLOR, (0, y), (WIDTH, y), 1)
    
    # رسم العوائق
    for obstacle in OBSTACLES:
        pygame.draw.rect(screen, (80, 70, 60), obstacle)
        pygame.draw.rect(screen, (110, 90, 70), obstacle, 3)
    
    # رسم الدبابات وطلقاتها
    for tank in tanks:
        tank.draw(screen)
        tank.draw_bullets(screen)
    
    # رسم لوحة النتائج
    pygame.draw.rect(screen, (40, 40, 50, 180), (10, 10, 200, 80), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (10, 10, 200, 80), width=2, border_radius=10)
    
    score_text1 = font_small.render(f"{player1.player_name}: {player1.score}", True, RED)
    score_text2 = font_small.render(f"{player2.player_name}: {player2.score}", True, BLUE)
    screen.blit(score_text1, (30, 25))
    screen.blit(score_text2, (30, 55))
    
    # رسم تعليمات التحكم
    pygame.draw.rect(screen, (40, 40, 50, 180), (WIDTH - 210, 10, 200, 110), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (WIDTH - 210, 10, 200, 110), width=2, border_radius=10)
    
    controls_text1 = font_small.render("اللاعب 1: WASD + مسافة", True, WHITE)
    controls_text2 = font_small.render("اللاعب 2: الأسهم + Enter", True, WHITE)
    restart_text = font_small.render("R: إعادة اللعبة", True, GREEN)
    exit_text = font_small.render("ESC: خروج", True, RED)
    
    screen.blit(controls_text1, (WIDTH - 190, 25))
    screen.blit(controls_text2, (WIDTH - 190, 50))
    screen.blit(restart_text, (WIDTH - 190, 80))
    screen.blit(exit_text, (WIDTH - 190, 105))
    
    # عرض شاشة النهاية
    if game_over and winner:
        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 180))
        screen.blit(overlay, (0, 0))
        
        winner_text = font_large.render(f"{winner.player_name} يفوز!", True, winner.color)
        restart_text = font_medium.render("اضغط R لإعادة اللعبة", True, GREEN)
        
        screen.blit(winner_text, (WIDTH//2 - winner_text.get_width()//2, HEIGHT//2 - 50))
        screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT//2 + 30))
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()import pygame
import math
import random
import sys

# تهيئة Pygame
pygame.init()

# إعدادات الشاشة
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("لعبة الدبابات - العب مع أصدقائك!")

# الألوان
BACKGROUND = (30, 30, 40)
GRID_COLOR = (50, 50, 60)
RED = (220, 60, 60)
BLUE = (60, 120, 220)
GREEN = (70, 180, 70)
YELLOW = (220, 180, 60)
WHITE = (240, 240, 240)
BLACK = (20, 20, 30)

# إعدادات الدبابة
TANK_WIDTH = 40
TANK_HEIGHT = 30
TURRET_LENGTH = 20
TANK_SPEED = 3
ROTATION_SPEED = 3
BULLET_SPEED = 7
MAX_BULLETS = 3

# إعدادات الخريطة
OBSTACLES = [
    pygame.Rect(150, 150, 100, 50),
    pygame.Rect(550, 150, 100, 50),
    pygame.Rect(150, 400, 100, 50),
    pygame.Rect(550, 400, 100, 50),
    pygame.Rect(350, 250, 100, 100),
]

# فئة الدبابة
class Tank:
    def __init__(self, x, y, color, controls, player_name):
        self.x = x
        self.y = y
        self.color = color
        self.angle = 0
        self.controls = controls  # [up, down, left, right, fire]
        self.bullets = []
        self.cooldown = 0
        self.health = 100
        self.score = 0
        self.player_name = player_name
        self.hit_effect = 0

    def draw(self, screen):
        # رسم هيكل الدبابة
        tank_rect = pygame.Rect(0, 0, TANK_WIDTH, TANK_HEIGHT)
        tank_surface = pygame.Surface((TANK_WIDTH, TANK_HEIGHT), pygame.SRCALPHA)
        pygame.draw.rect(tank_surface, self.color, tank_rect, border_radius=8)
        pygame.draw.rect(tank_surface, (self.color[0]//2, self.color[1]//2, self.color[2]//2), 
                         tank_rect, width=3, border_radius=8)
        
        # رسم البرج
        turret_end_x = TANK_WIDTH // 2 + TURRET_LENGTH * math.cos(math.radians(self.angle))
        turret_end_y = TANK_HEIGHT // 2 + TURRET_LENGTH * math.sin(math.radians(self.angle))
        pygame.draw.line(tank_surface, (100, 100, 100), 
                        (TANK_WIDTH // 2, TANK_HEIGHT // 2), 
                        (turret_end_x, turret_end_y), 5)
        
        # تدوير الدبابة
        rotated_tank = pygame.transform.rotate(tank_surface, -self.angle)
        tank_rect = rotated_tank.get_rect(center=(self.x, self.y))
        screen.blit(rotated_tank, tank_rect.topleft)
        
        # تأثير الضرب
        if self.hit_effect > 0:
            pygame.draw.circle(screen, RED, (self.x, self.y), TANK_WIDTH//2 + 5, 3)
            self.hit_effect -= 1
        
        # عرض اسم اللاعب
        font = pygame.font.SysFont(None, 24)
        name_text = font.render(self.player_name, True, WHITE)
        screen.blit(name_text, (self.x - name_text.get_width()//2, self.y - 40))
        
        # عرض الصحة
        health_width = 40
        pygame.draw.rect(screen, (60, 60, 70), (self.x - health_width//2, self.y - 30, health_width, 5))
        pygame.draw.rect(screen, GREEN, (self.x - health_width//2, self.y - 30, health_width * self.health // 100, 5))

    def move(self, keys):
        # حركة الدبابة
        dx, dy = 0, 0
        if keys[self.controls[0]]:  # أعلى
            dx = TANK_SPEED * math.cos(math.radians(self.angle))
            dy = TANK_SPEED * math.sin(math.radians(self.angle))
        if keys[self.controls[1]]:  # أسفل
            dx = -TANK_SPEED * math.cos(math.radians(self.angle)) / 2
            dy = -TANK_SPEED * math.sin(math.radians(self.angle)) / 2
        if keys[self.controls[2]]:  # يسار
            self.angle -= ROTATION_SPEED
        if keys[self.controls[3]]:  # يمين
            self.angle += ROTATION_SPEED
            
        # تحديث الموقع مع التحقق من التصادمات
        new_x = self.x + dx
        new_y = self.y + dy
        
        # التحقق من حدود الشاشة
        if TANK_WIDTH//2 < new_x < WIDTH - TANK_WIDTH//2:
            self.x = new_x
        if TANK_HEIGHT//2 < new_y < HEIGHT - TANK_HEIGHT//2:
            self.y = new_y
            
        # التحقق من التصادم مع العوائق
        tank_rect = pygame.Rect(self.x - TANK_WIDTH//2, self.y - TANK_HEIGHT//2, TANK_WIDTH, TANK_HEIGHT)
        for obstacle in OBSTACLES:
            if tank_rect.colliderect(obstacle):
                self.x -= dx
                self.y -= dy
                break
        
        # تبريد الطلقات
        if self.cooldown > 0:
            self.cooldown -= 1

    def fire(self):
        if self.cooldown == 0 and len(self.bullets) < MAX_BULLETS:
            bullet_x = self.x + (TANK_WIDTH//2 + TURRET_LENGTH) * math.cos(math.radians(self.angle))
            bullet_y = self.y + (TANK_HEIGHT//2 + TURRET_LENGTH) * math.sin(math.radians(self.angle))
            self.bullets.append([bullet_x, bullet_y, self.angle])
            self.cooldown = 20  # تأخير بين الطلقات

    def update_bullets(self, tanks):
        new_bullets = []
        for bullet in self.bullets:
            bullet[0] += BULLET_SPEED * math.cos(math.radians(bullet[2]))
            bullet[1] += BULLET_SPEED * math.sin(math.radians(bullet[2]))
            
            # التحقق من حدود الشاشة
            if 0 <= bullet[0] <= WIDTH and 0 <= bullet[1] <= HEIGHT:
                # التحقق من التصادم مع العوائق
                hit_obstacle = False
                for obstacle in OBSTACLES:
                    if obstacle.collidepoint(bullet[0], bullet[1]):
                        hit_obstacle = True
                        break
                
                if not hit_obstacle:
                    new_bullets.append(bullet)
                    
                    # التحقق من إصابة الدبابات
                    for tank in tanks:
                        if tank != self:
                            tank_rect = pygame.Rect(
                                tank.x - TANK_WIDTH//2,
                                tank.y - TANK_HEIGHT//2,
                                TANK_WIDTH,
                                TANK_HEIGHT
                            )
                            if tank_rect.collidepoint(bullet[0], bullet[1]):
                                tank.health -= 10
                                tank.hit_effect = 10
                                if tank.health <= 0:
                                    tank.health = 100
                                    tank.x = random.randint(TANK_WIDTH, WIDTH - TANK_WIDTH)
                                    tank.y = random.randint(TANK_HEIGHT, HEIGHT - TANK_HEIGHT)
                                    self.score += 1
                                break
        self.bullets = new_bullets

    def draw_bullets(self, screen):
        for bullet in self.bullets:
            pygame.draw.circle(screen, YELLOW, (int(bullet[0]), int(bullet[1])), 5)
            pygame.draw.circle(screen, (220, 220, 100), (int(bullet[0]), int(bullet[1])), 3)

# إنشاء الدبابات
player1 = Tank(100, 300, RED, [pygame.K_w, pygame.K_s, pygame.K_a, pygame.K_d, pygame.K_SPACE], "اللاعب 1")
player2 = Tank(700, 300, BLUE, [pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT, pygame.K_RETURN], "اللاعب 2")
tanks = [player1, player2]

# إنشاء النجوم في الخلفية
stars = []
for _ in range(100):
    x = random.randint(0, WIDTH)
    y = random.randint(0, HEIGHT)
    size = random.randint(1, 3)
    speed = random.uniform(0.1, 0.5)
    stars.append([x, y, size, speed])

# إعدادات اللعبة
clock = pygame.time.Clock()
font_large = pygame.font.SysFont(None, 64)
font_medium = pygame.font.SysFont(None, 36)
font_small = pygame.font.SysFont(None, 24)

# حلقة اللعبة الرئيسية
running = True
game_over = False
winner = None

while running:
    # معالجة الأحداث
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_r and game_over:
                # إعادة تشغيل اللعبة
                player1.health = 100
                player2.health = 100
                player1.score = 0
                player2.score = 0
                player1.x, player1.y = 100, 300
                player2.x, player2.y = 700, 300
                game_over = False
                winner = None
            elif event.key == player1.controls[4]:  # إطلاق اللاعب 1
                player1.fire()
            elif event.key == player2.controls[4]:  # إطلاق اللاعب 2
                player2.fire()
    
    # تحديث النجوم
    for star in stars:
        star[1] += star[3]
        if star[1] > HEIGHT:
            star[1] = 0
            star[0] = random.randint(0, WIDTH)
    
    if not game_over:
        # الحصول على حالة المفاتيح
        keys = pygame.key.get_pressed()
        
        # تحريك الدبابات
        for tank in tanks:
            tank.move(keys)
            tank.update_bullets(tanks)
    
    # التحقق من فوز أحد اللاعبين
    if not game_over and (player1.score >= 5 or player2.score >= 5):
        game_over = True
        winner = player1 if player1.score >= 5 else player2
    
    # الرسم
    screen.fill(BACKGROUND)
    
    # رسم النجوم
    for star in stars:
        pygame.draw.circle(screen, WHITE, (int(star[0]), int(star[1])), star[2])
    
    # رسم الشبكة
    for x in range(0, WIDTH, 40):
        pygame.draw.line(screen, GRID_COLOR, (x, 0), (x, HEIGHT), 1)
    for y in range(0, HEIGHT, 40):
        pygame.draw.line(screen, GRID_COLOR, (0, y), (WIDTH, y), 1)
    
    # رسم العوائق
    for obstacle in OBSTACLES:
        pygame.draw.rect(screen, (80, 70, 60), obstacle)
        pygame.draw.rect(screen, (110, 90, 70), obstacle, 3)
    
    # رسم الدبابات وطلقاتها
    for tank in tanks:
        tank.draw(screen)
        tank.draw_bullets(screen)
    
    # رسم لوحة النتائج
    pygame.draw.rect(screen, (40, 40, 50, 180), (10, 10, 200, 80), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (10, 10, 200, 80), width=2, border_radius=10)
    
    score_text1 = font_small.render(f"{player1.player_name}: {player1.score}", True, RED)
    score_text2 = font_small.render(f"{player2.player_name}: {player2.score}", True, BLUE)
    screen.blit(score_text1, (30, 25))
    screen.blit(score_text2, (30, 55))
    
    # رسم تعليمات التحكم
    pygame.draw.rect(screen, (40, 40, 50, 180), (WIDTH - 210, 10, 200, 110), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (WIDTH - 210, 10, 200, 110), width=2, border_radius=10)
    
    controls_text1 = font_small.render("اللاعب 1: WASD + مسافة", True, WHITE)
    controls_text2 = font_small.render("اللاعب 2: الأسهم + Enter", True, WHITE)
    restart_text = font_small.render("R: إعادة اللعبة", True, GREEN)
    exit_text = font_small.render("ESC: خروج", True, RED)
    
    screen.blit(controls_text1, (WIDTH - 190, 25))
    screen.blit(controls_text2, (WIDTH - 190, 50))
    screen.blit(restart_text, (WIDTH - 190, 80))
    screen.blit(exit_text, (WIDTH - 190, 105))
    
    # عرض شاشة النهاية
    if game_over and winner:
        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 180))
        screen.blit(overlay, (0, 0))
        
        winner_text = font_large.render(f"{winner.player_name} يفوز!", True, winner.color)
        restart_text = font_medium.render("اضغط R لإعادة اللعبة", True, GREEN)
        
        screen.blit(winner_text, (WIDTH//2 - winner_text.get_width()//2, HEIGHT//2 - 50))
        screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT//2 + 30))
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()import pygame
import math
import random
import sys

# تهيئة Pygame
pygame.init()

# إعدادات الشاشة
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("لعبة الدبابات - العب مع أصدقائك!")

# الألوان
BACKGROUND = (30, 30, 40)
GRID_COLOR = (50, 50, 60)
RED = (220, 60, 60)
BLUE = (60, 120, 220)
GREEN = (70, 180, 70)
YELLOW = (220, 180, 60)
WHITE = (240, 240, 240)
BLACK = (20, 20, 30)

# إعدادات الدبابة
TANK_WIDTH = 40
TANK_HEIGHT = 30
TURRET_LENGTH = 20
TANK_SPEED = 3
ROTATION_SPEED = 3
BULLET_SPEED = 7
MAX_BULLETS = 3

# إعدادات الخريطة
OBSTACLES = [
    pygame.Rect(150, 150, 100, 50),
    pygame.Rect(550, 150, 100, 50),
    pygame.Rect(150, 400, 100, 50),
    pygame.Rect(550, 400, 100, 50),
    pygame.Rect(350, 250, 100, 100),
]

# فئة الدبابة
class Tank:
    def __init__(self, x, y, color, controls, player_name):
        self.x = x
        self.y = y
        self.color = color
        self.angle = 0
        self.controls = controls  # [up, down, left, right, fire]
        self.bullets = []
        self.cooldown = 0
        self.health = 100
        self.score = 0
        self.player_name = player_name
        self.hit_effect = 0

    def draw(self, screen):
        # رسم هيكل الدبابة
        tank_rect = pygame.Rect(0, 0, TANK_WIDTH, TANK_HEIGHT)
        tank_surface = pygame.Surface((TANK_WIDTH, TANK_HEIGHT), pygame.SRCALPHA)
        pygame.draw.rect(tank_surface, self.color, tank_rect, border_radius=8)
        pygame.draw.rect(tank_surface, (self.color[0]//2, self.color[1]//2, self.color[2]//2), 
                         tank_rect, width=3, border_radius=8)
        
        # رسم البرج
        turret_end_x = TANK_WIDTH // 2 + TURRET_LENGTH * math.cos(math.radians(self.angle))
        turret_end_y = TANK_HEIGHT // 2 + TURRET_LENGTH * math.sin(math.radians(self.angle))
        pygame.draw.line(tank_surface, (100, 100, 100), 
                        (TANK_WIDTH // 2, TANK_HEIGHT // 2), 
                        (turret_end_x, turret_end_y), 5)
        
        # تدوير الدبابة
        rotated_tank = pygame.transform.rotate(tank_surface, -self.angle)
        tank_rect = rotated_tank.get_rect(center=(self.x, self.y))
        screen.blit(rotated_tank, tank_rect.topleft)
        
        # تأثير الضرب
        if self.hit_effect > 0:
            pygame.draw.circle(screen, RED, (self.x, self.y), TANK_WIDTH//2 + 5, 3)
            self.hit_effect -= 1
        
        # عرض اسم اللاعب
        font = pygame.font.SysFont(None, 24)
        name_text = font.render(self.player_name, True, WHITE)
        screen.blit(name_text, (self.x - name_text.get_width()//2, self.y - 40))
        
        # عرض الصحة
        health_width = 40
        pygame.draw.rect(screen, (60, 60, 70), (self.x - health_width//2, self.y - 30, health_width, 5))
        pygame.draw.rect(screen, GREEN, (self.x - health_width//2, self.y - 30, health_width * self.health // 100, 5))

    def move(self, keys):
        # حركة الدبابة
        dx, dy = 0, 0
        if keys[self.controls[0]]:  # أعلى
            dx = TANK_SPEED * math.cos(math.radians(self.angle))
            dy = TANK_SPEED * math.sin(math.radians(self.angle))
        if keys[self.controls[1]]:  # أسفل
            dx = -TANK_SPEED * math.cos(math.radians(self.angle)) / 2
            dy = -TANK_SPEED * math.sin(math.radians(self.angle)) / 2
        if keys[self.controls[2]]:  # يسار
            self.angle -= ROTATION_SPEED
        if keys[self.controls[3]]:  # يمين
            self.angle += ROTATION_SPEED
            
        # تحديث الموقع مع التحقق من التصادمات
        new_x = self.x + dx
        new_y = self.y + dy
        
        # التحقق من حدود الشاشة
        if TANK_WIDTH//2 < new_x < WIDTH - TANK_WIDTH//2:
            self.x = new_x
        if TANK_HEIGHT//2 < new_y < HEIGHT - TANK_HEIGHT//2:
            self.y = new_y
            
        # التحقق من التصادم مع العوائق
        tank_rect = pygame.Rect(self.x - TANK_WIDTH//2, self.y - TANK_HEIGHT//2, TANK_WIDTH, TANK_HEIGHT)
        for obstacle in OBSTACLES:
            if tank_rect.colliderect(obstacle):
                self.x -= dx
                self.y -= dy
                break
        
        # تبريد الطلقات
        if self.cooldown > 0:
            self.cooldown -= 1

    def fire(self):
        if self.cooldown == 0 and len(self.bullets) < MAX_BULLETS:
            bullet_x = self.x + (TANK_WIDTH//2 + TURRET_LENGTH) * math.cos(math.radians(self.angle))
            bullet_y = self.y + (TANK_HEIGHT//2 + TURRET_LENGTH) * math.sin(math.radians(self.angle))
            self.bullets.append([bullet_x, bullet_y, self.angle])
            self.cooldown = 20  # تأخير بين الطلقات

    def update_bullets(self, tanks):
        new_bullets = []
        for bullet in self.bullets:
            bullet[0] += BULLET_SPEED * math.cos(math.radians(bullet[2]))
            bullet[1] += BULLET_SPEED * math.sin(math.radians(bullet[2]))
            
            # التحقق من حدود الشاشة
            if 0 <= bullet[0] <= WIDTH and 0 <= bullet[1] <= HEIGHT:
                # التحقق من التصادم مع العوائق
                hit_obstacle = False
                for obstacle in OBSTACLES:
                    if obstacle.collidepoint(bullet[0], bullet[1]):
                        hit_obstacle = True
                        break
                
                if not hit_obstacle:
                    new_bullets.append(bullet)
                    
                    # التحقق من إصابة الدبابات
                    for tank in tanks:
                        if tank != self:
                            tank_rect = pygame.Rect(
                                tank.x - TANK_WIDTH//2,
                                tank.y - TANK_HEIGHT//2,
                                TANK_WIDTH,
                                TANK_HEIGHT
                            )
                            if tank_rect.collidepoint(bullet[0], bullet[1]):
                                tank.health -= 10
                                tank.hit_effect = 10
                                if tank.health <= 0:
                                    tank.health = 100
                                    tank.x = random.randint(TANK_WIDTH, WIDTH - TANK_WIDTH)
                                    tank.y = random.randint(TANK_HEIGHT, HEIGHT - TANK_HEIGHT)
                                    self.score += 1
                                break
        self.bullets = new_bullets

    def draw_bullets(self, screen):
        for bullet in self.bullets:
            pygame.draw.circle(screen, YELLOW, (int(bullet[0]), int(bullet[1])), 5)
            pygame.draw.circle(screen, (220, 220, 100), (int(bullet[0]), int(bullet[1])), 3)

# إنشاء الدبابات
player1 = Tank(100, 300, RED, [pygame.K_w, pygame.K_s, pygame.K_a, pygame.K_d, pygame.K_SPACE], "اللاعب 1")
player2 = Tank(700, 300, BLUE, [pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT, pygame.K_RETURN], "اللاعب 2")
tanks = [player1, player2]

# إنشاء النجوم في الخلفية
stars = []
for _ in range(100):
    x = random.randint(0, WIDTH)
    y = random.randint(0, HEIGHT)
    size = random.randint(1, 3)
    speed = random.uniform(0.1, 0.5)
    stars.append([x, y, size, speed])

# إعدادات اللعبة
clock = pygame.time.Clock()
font_large = pygame.font.SysFont(None, 64)
font_medium = pygame.font.SysFont(None, 36)
font_small = pygame.font.SysFont(None, 24)

# حلقة اللعبة الرئيسية
running = True
game_over = False
winner = None

while running:
    # معالجة الأحداث
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                running = False
            elif event.key == pygame.K_r and game_over:
                # إعادة تشغيل اللعبة
                player1.health = 100
                player2.health = 100
                player1.score = 0
                player2.score = 0
                player1.x, player1.y = 100, 300
                player2.x, player2.y = 700, 300
                game_over = False
                winner = None
            elif event.key == player1.controls[4]:  # إطلاق اللاعب 1
                player1.fire()
            elif event.key == player2.controls[4]:  # إطلاق اللاعب 2
                player2.fire()
    
    # تحديث النجوم
    for star in stars:
        star[1] += star[3]
        if star[1] > HEIGHT:
            star[1] = 0
            star[0] = random.randint(0, WIDTH)
    
    if not game_over:
        # الحصول على حالة المفاتيح
        keys = pygame.key.get_pressed()
        
        # تحريك الدبابات
        for tank in tanks:
            tank.move(keys)
            tank.update_bullets(tanks)
    
    # التحقق من فوز أحد اللاعبين
    if not game_over and (player1.score >= 5 or player2.score >= 5):
        game_over = True
        winner = player1 if player1.score >= 5 else player2
    
    # الرسم
    screen.fill(BACKGROUND)
    
    # رسم النجوم
    for star in stars:
        pygame.draw.circle(screen, WHITE, (int(star[0]), int(star[1])), star[2])
    
    # رسم الشبكة
    for x in range(0, WIDTH, 40):
        pygame.draw.line(screen, GRID_COLOR, (x, 0), (x, HEIGHT), 1)
    for y in range(0, HEIGHT, 40):
        pygame.draw.line(screen, GRID_COLOR, (0, y), (WIDTH, y), 1)
    
    # رسم العوائق
    for obstacle in OBSTACLES:
        pygame.draw.rect(screen, (80, 70, 60), obstacle)
        pygame.draw.rect(screen, (110, 90, 70), obstacle, 3)
    
    # رسم الدبابات وطلقاتها
    for tank in tanks:
        tank.draw(screen)
        tank.draw_bullets(screen)
    
    # رسم لوحة النتائج
    pygame.draw.rect(screen, (40, 40, 50, 180), (10, 10, 200, 80), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (10, 10, 200, 80), width=2, border_radius=10)
    
    score_text1 = font_small.render(f"{player1.player_name}: {player1.score}", True, RED)
    score_text2 = font_small.render(f"{player2.player_name}: {player2.score}", True, BLUE)
    screen.blit(score_text1, (30, 25))
    screen.blit(score_text2, (30, 55))
    
    # رسم تعليمات التحكم
    pygame.draw.rect(screen, (40, 40, 50, 180), (WIDTH - 210, 10, 200, 110), border_radius=10)
    pygame.draw.rect(screen, (60, 60, 80), (WIDTH - 210, 10, 200, 110), width=2, border_radius=10)
    
    controls_text1 = font_small.render("اللاعب 1: WASD + مسافة", True, WHITE)
    controls_text2 = font_small.render("اللاعب 2: الأسهم + Enter", True, WHITE)
    restart_text = font_small.render("R: إعادة اللعبة", True, GREEN)
    exit_text = font_small.render("ESC: خروج", True, RED)
    
    screen.blit(controls_text1, (WIDTH - 190, 25))
    screen.blit(controls_text2, (WIDTH - 190, 50))
    screen.blit(restart_text, (WIDTH - 190, 80))
    screen.blit(exit_text, (WIDTH - 190, 105))
    
    # عرض شاشة النهاية
    if game_over and winner:
        overlay = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
        overlay.fill((0, 0, 0, 180))
        screen.blit(overlay, (0, 0))
        
        winner_text = font_large.render(f"{winner.player_name} يفوز!", True, winner.color)
        restart_text = font_medium.render("اضغط R لإعادة اللعبة", True, GREEN)
        
        screen.blit(winner_text, (WIDTH//2 - winner_text.get_width()//2, HEIGHT//2 - 50))
        screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT//2 + 30))
    
    pygame.display.flip()
    clock.tick(60)

pygame.quit()
sys.exit()
